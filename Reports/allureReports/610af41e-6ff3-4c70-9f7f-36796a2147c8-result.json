{"name": "test_click_autologin", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"input#button button-primary g-recaptcha\"}\n  (Session info: MicrosoftEdge=102.0.1245.44)\nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::unpack [0x006B8B23+58371]\n\tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x00593901+1430161]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x0037353E+3502]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x0039D22E+100046]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x0039D3AA+100426]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003C0922+245186]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003B1404+182436]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003BF1D3+239219]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003B1136+181718]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00394466+63750]\n\tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003951F6+67222]\n\tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x008B1335+617557]\n\tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00831273+93075]\n\tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00830F17+92215]\n\tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00834FAA+108746]\n\tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x0083195A+94842]\n\tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005A55E7+1503095]\n\tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005AF618+1544104]\n\tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005AF7A2+1544498]\n\tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005C1E02+1619858]\n\tBaseThreadInitThunk [0x7649FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x772D7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x772D7A6E+238]", "trace": "self = <testCases.test_Login.Test_Auto_Page object at 0x00000271FAB57070>, setup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"c14d6d91d57d25afffe2576b5ac58e18\")>\n\n    @pytest.mark.smoke\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_click_autologin(self,setup):\n        self.loggerr.info(\"************ Test 002 - Start  **************\")\n        self.driver = setup\n        self.driver.get(self.urlmain_auto)\n        self.driver.maximize_window()\n        self.loggerr.info(\"************ Going to Login Automation page  **************\")\n        click_login = self.driver.find_element(By.LINK_TEXT, 'Login automation')\n        click_login.click()\n        self.loggerr.info(\"************ Verifying Page Title 002 **************\")\n        actual_title = self.driver.title\n        if actual_title == \"Ultimate QA\":\n            self.driver.save_screenshot(\"..//Screenshots//\" + \"test_click_autologinPASSED.png\")\n            self.loggerr.info(\"************** VERIFIED  002 ********\")\n            assert True\n        else:\n            self.driver.save_screenshot(\"..//Screenshots//\" + \"test_click_autologinFAILED.png\")\n            self.loggerr.info(\"************ Title does not match  002 **************\")\n            assert False\n        self.loggerr.info(\"************ Entering Email  **************\")\n        self.L=Login(self.driver)\n        self.L.setUserEmail(self.userEmail)\n        self.loggerr.info(\"************ Entering PassWord  **************\")\n        self.L.setUserPassword(self.userPassword)\n        time.sleep(5)\n        self.loggerr.info(\"************ Click on Sign In Button with Captcha  **************\")\n    \n>       self.driver.find_element(By.CSS_SELECTOR, 'input#button button-primary g-recaptcha').click()\n\ntest_Login.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\.virtualenvs\\VOSS_Test_Assessment\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\..\\..\\.virtualenvs\\VOSS_Test_Assessment\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000271FABA6830>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772D7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772D7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"input#button button-primary g-recaptcha\"}\nE         (Session info: MicrosoftEdge=102.0.1245.44)\nE       Stacktrace:\nE       Backtrace:\nE       \tMicrosoft::Applications::Events::EventProperties::unpack [0x006B8B23+58371]\nE       \tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x00593901+1430161]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x0037353E+3502]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x0039D22E+100046]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x0039D3AA+100426]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003C0922+245186]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003B1404+182436]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003BF1D3+239219]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003B1136+181718]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x00394466+63750]\nE       \tMicrosoft::Applications::Events::GUID_t::GUID_t [0x003951F6+67222]\nE       \tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x008B1335+617557]\nE       \tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00831273+93075]\nE       \tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00830F17+92215]\nE       \tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00834FAA+108746]\nE       \tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x0083195A+94842]\nE       \tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005A55E7+1503095]\nE       \tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005AF618+1544104]\nE       \tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005AF7A2+1544498]\nE       \tMicrosoft::Applications::Events::ISemanticContext::SetTicket [0x005C1E02+1619858]\nE       \tBaseThreadInitThunk [0x7649FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x772D7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x772D7A6E+238]\n\n..\\..\\..\\..\\.virtualenvs\\VOSS_Test_Assessment\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException"}, "attachments": [{"name": "log", "source": "7c5b90b5-e4e7-4eec-9cc9-f1db34967308-attachment.txt", "type": "text/plain"}], "start": 1656091988974, "stop": 1656091996765, "uuid": "5734cbd6-5bdd-44a0-b303-833125cc4ccc", "historyId": "50a18c39a1803ebe220f9086bf7a4ab9", "testCaseId": "2a62cb3ad437ca36285478c4bd989414", "fullName": "test_Login.Test_Auto_Page#test_click_autologin", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "smoke"}, {"name": "suite", "value": "test_Login"}, {"name": "subSuite", "value": "Test_Auto_Page"}, {"name": "host", "value": "LAPTOP-F70EPTEM"}, {"name": "thread", "value": "12132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Login"}]}